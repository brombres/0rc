module Orc

class OrcValue
  METHODS
    method display
      noAction

    method is_undefined->Logical
      return false

    method operator-()->OrcValue
      return OrcUndefined

    method operator+( other:OrcValue )->OrcValue
      return OrcUndefined

    method operator-( other:OrcValue )->OrcValue
      return OrcUndefined

    method operator*( other:OrcValue )->OrcValue
      return OrcUndefined

    method operator/( other:OrcValue )->OrcValue
      return OrcUndefined

    method operator%( other:OrcValue )->OrcValue
      return OrcUndefined

    method to->Int
      return 0

    method to->Real
      return this->Int
endClass

class OrcNumber : OrcValue;

class OrcInt( value:Int ) : OrcNumber
  METHODS
    method display
      Orc.display_int( value )

    method operator-()->OrcValue
      return OrcInt( -value )

    method operator+( other:OrcValue )->OrcValue
      if local other = other->(as OrcInt)
        return OrcInt( value + other.value )
      elseIf local other = other->(as OrcReal)
        return OrcReal( value + other.value )
      else
        return OrcUndefined
      endIf

    method operator-( other:OrcValue )->OrcValue
      if local other = other->(as OrcInt)
        return OrcInt( value - other.value )
      elseIf local other = other->(as OrcReal)
        return OrcReal( value - other.value )
      else
        return OrcUndefined
      endIf

    method operator*( other:OrcValue )->OrcValue
      if local other = other->(as OrcInt)
        return OrcInt( value * other.value )
      elseIf local other = other->(as OrcReal)
        return OrcReal( value * other.value )
      else
        return OrcUndefined
      endIf

    method operator/( other:OrcValue )->OrcValue
      if local other = other->(as OrcInt)
        if (other.value == 0) return OrcUndefined
        return OrcInt( value / other.value )
      elseIf local other = other->(as OrcReal)
        return OrcReal( value / other.value )
      else
        return OrcUndefined
      endIf

    method operator%( other:OrcValue )->OrcValue
      if local other = other->(as OrcInt)
        if (other.value == 0) return OrcUndefined
        return OrcInt( value % other.value )
      elseIf local other = other->(as OrcReal)
        return OrcReal( value % other.value )
      else
        return OrcUndefined
      endIf

    method to->Int
      return value

    method to->Real
      return value

    method to->String
      return value->String
endClass

class OrcReal( value:Real ) : OrcNumber
  METHODS
    method display
      Orc.display_real( value )

    method operator-()->OrcValue
      return OrcReal( -value )

    method operator+( other:OrcValue )->OrcValue
      if local other = other->(as OrcNumber)
        return OrcReal( value + other->Real )
      else
        return OrcUndefined
      endIf

    method operator-( other:OrcValue )->OrcValue
      if local other = other->(as OrcNumber)
        return OrcReal( value - other->Real )
      else
        return OrcUndefined
      endIf

    method operator*( other:OrcValue )->OrcValue
      if local other = other->(as OrcNumber)
        return OrcReal( value * other->Real )
      else
        return OrcUndefined
      endIf

    method operator/( other:OrcValue )->OrcValue
      if local other = other->(as OrcNumber)
        return OrcReal( value / other->Real )
      else
        return OrcUndefined
      endIf

    method operator%( other:OrcValue )->OrcValue
      if local other = other->(as OrcNumber)
        return OrcReal( value % other->Real )
      else
        return OrcUndefined
      endIf

    method to->Int
      return value

    method to->Real
      return value

    method to->String
      return value->String
endClass

class OrcUndefined : OrcValue [singleton]
  METHODS
    method display
      Orc.print_indent
      println "[undefined]"

    method is_undefined->Logical
      return true
endClass
