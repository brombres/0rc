module OxCalc

$include CmdExecute
$include OxObject
$include Parser  [optional]
$include Resolver
$include Scanner
$include Visitor

uses Console/CommandLineParser

try
  OxCalc( System.command_line_arguments )
catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  Console.error.println error
  Console.error.println error.stack_trace
  System.exit 1
endTry

class OxCalc
  PROPERTIES
    command : Variant

  METHODS
    method init( args:String[] )
      command = parse_args( args )

      # trace command
      # has //options and possibly //args

      if (command//options//help or command//args.count == 0)
        print_usage
        System.exit 0
      endIf

      repl

    method parse_files
      if ($isDefined(PARSER_EXISTS))
        forEach (arg in command//args)
          local filepath = arg->String
          local parser = Parser( File(filepath) )
          local ast = parser.parse
          @trace ast
        endForEach
      endIf

    method repl
      println "0x Calculator"
      println "Commands include (h)elp and (q)uit."
      local index = 1
      loop
        local input = Console.input( "$> "(("#"+index).justified(5)) )
        if (not input or input == "quit" or input == "q") escapeLoop
        if (input == "") nextIteration

        local parser = Parser( "<$>"(index.format("4")), input )
        try
          local statements = parser.parse
          Resolver.visit( statements )
          local result = statements.execute
          if (not result.is_undefined)
            print   "       "
            println %result
          endIf
        catch (error:CompileError)
          println "ERROR: " + error.message
        endTry

        ++index
      endLoop

    method parse_args( args:String[] )->Variant
      # This method is unrelated to the Froley Parser
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println @|USAGE
               |  0x [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass
