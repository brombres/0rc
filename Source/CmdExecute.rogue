module Ox

augment
  METHODS
    method Cmd.execute->OxValue
      throw t.error( "[INTERNAL] $.execute() is undefined."(type_name) )

    method Add.execute->OxValue
      left.execute
      right.execute
      local b = Ox.pop
      local a = Ox.pop
      local result = a + b
      Ox.push( result )
      return result

    method Subtract.execute->OxValue
      left.execute
      right.execute
      local b = Ox.pop
      local a = Ox.pop
      local result = a - b
      Ox.push( result )
      return result

    method Multiply.execute->OxValue
      left.execute
      right.execute
      local b = Ox.pop
      local a = Ox.pop
      local result = a * b
      Ox.push( result )
      return result

    method Divide.execute->OxValue
      left.execute
      right.execute
      local b = Ox.pop
      local a = Ox.pop
      local result = a / b
      Ox.push( result )
      return result

    method DivideReal.execute->OxValue
      left.execute
      right.execute
      local b = Ox.pop
      local a = Ox.pop
      local result = OxReal( a->Real / b->Real )
      Ox.push( result )
      return result

    method Mod.execute->OxValue
      left.execute
      right.execute
      local b = Ox.pop
      local a = Ox.pop
      local result = a % b
      Ox.push( result )
      return result

    method LiteralInt.execute->OxValue
      local result = OxInt( value )
      Ox.push( result )
      return result

    method LiteralReal.execute->OxValue
      local result = OxReal( value )
      Ox.push( result )
      return result

    method Negate.execute->OxValue
      local result = -(Ox.pop)
      Ox.push( result )
      return result

    method StackAdd.execute->OxValue
      local b = Ox.pop
      local a = Ox.pop
      if local a_number = a->(as OxNumber)
        if local b_number = b->(as OxNumber)
          if (a_number instanceOf OxReal or b_number instanceOf OxReal)
            local a_real = a_number->Real
            local b_real = b_number->Real
            local result = OxReal( a_real + b_real )
            Ox.push( result )
            return result
          else
            local a_int = a_number->(as OxInt).value
            local b_int = b_number->(as OxInt).value
            local result = OxInt( a_int + b_int)
            Ox.push( result )
            return result
          endIf
        endIf
      endIf

      Ox.push( OxUndefined )
      return OxUndefined

    method StackSubtract.execute->OxValue
      local b = Ox.pop
      local a = Ox.pop
      if local a_number = a->(as OxNumber)
        if local b_number = b->(as OxNumber)
          if (a_number instanceOf OxReal or b_number instanceOf OxReal)
            local a_real = a_number->Real
            local b_real = b_number->Real
            local result = OxReal( a_real - b_real )
            Ox.push( result )
            return result
          else
            local a_int = a_number->(as OxInt).value
            local b_int = b_number->(as OxInt).value
            local result = OxInt( a_int - b_int)
            Ox.push( result )
            return result
          endIf
        endIf
      endIf

      Ox.push( OxUndefined )
      return OxUndefined

    method StackMultiply.execute->OxValue
      local b = Ox.pop
      local a = Ox.pop
      if local a_number = a->(as OxNumber)
        if local b_number = b->(as OxNumber)
          if (a_number instanceOf OxReal or b_number instanceOf OxReal)
            local a_real = a_number->Real
            local b_real = b_number->Real
            local result = OxReal( a_real * b_real )
            Ox.push( result )
            return result
          else
            local a_int = a_number->(as OxInt).value
            local b_int = b_number->(as OxInt).value
            local result = OxInt( a_int * b_int)
            Ox.push( result )
            return result
          endIf
        endIf
      endIf

      Ox.push( OxUndefined )
      return OxUndefined

    method StackDivide.execute->OxValue
      local b = Ox.pop
      local a = Ox.pop
      if local a_number = a->(as OxNumber)
        if local b_number = b->(as OxNumber)
          if (a_number instanceOf OxReal or b_number instanceOf OxReal)
            local a_real = a_number->Real
            local b_real = b_number->Real
            local result = OxReal( a_real / b_real )
            Ox.push( result )
            return result
          else
            local a_int = a_number->(as OxInt).value
            local b_int = b_number->(as OxInt).value
            if (b_int)
              local result = OxInt( a_int / b_int)
              Ox.push( result )
              return result
            endIf
          endIf
        endIf
      endIf

      Ox.push( OxUndefined )
      return OxUndefined

    method StackMod.execute->OxValue
      local b = Ox.pop
      local a = Ox.pop
      if local a_number = a->(as OxNumber)
        if local b_number = b->(as OxNumber)
          if (a_number instanceOf OxReal or b_number instanceOf OxReal)
            local a_real = a_number->Real
            local b_real = b_number->Real
            local result = OxReal( a_real % b_real )
            Ox.push( result )
            return result
          else
            local a_int = a_number->(as OxInt).value
            local b_int = b_number->(as OxInt).value
            if (b_int)
              local result = OxInt( a_int % b_int)
              Ox.push( result )
              return result
            endIf
          endIf
        endIf
      endIf

      Ox.push( OxUndefined )
      return OxUndefined

    method StackDivideReal.execute->OxValue
      local b = Ox.pop
      local a = Ox.pop
      if local a_number = a->(as OxNumber)
        if local b_number = b->(as OxNumber)
          local a_real = a_number->Real
          local b_real = b_number->Real
          local result = OxReal( a_real / b_real )
          Ox.push( result )
          return result
        endIf
      endIf

      Ox.push( OxUndefined )
      return OxUndefined

    method Statements.execute->OxValue
      local result = OxUndefined : OxValue
      forEach (statement in this)
        result = statement.execute
      endForEach
      return result

endAugment
