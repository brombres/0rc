module Orc

$include CmdExecute
$include OrcObject
$include Parser  [optional]
$include Resolver
$include Scanner
$include Visitor

uses Console/CommandLineParser

try
  Orc.init( System.command_line_arguments )
catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  Console.error.println error
  Console.error.println error.stack_trace
  System.exit 1
endTry

class Orc [singleton]
  PROPERTIES
    command_line  : Variant
    command_index = 1

    display_bits  : Int32

  METHODS
    method init( args:String[] )
      command_line = parse_args( args )

      # trace command_line
      # has //options and possibly //args

      if (command_line//options//help or command_line//args.count == 0)
        print_usage
        System.exit 0
      endIf

      repl

    method display_bitwise( value:Int )
      local n = value
      local nbits : Int
      if (n < 0) nbits = (n + 1).abs.minimum_bits + 1
      else       nbits = n.minimum_bits + 1

      if (display_bits)
        if (display_bits < nbits) value &= ((1:<<:display_bits) - 1)
        nbits = display_bits
      else
        if (nbits <= 32) nbits = 32
        else             nbits = 64
      endIf

      local max_n = (1 :<<: (nbits-1)) - 1

      local decimal_width = max_n.digit_count
      decimal_width += (decimal_width / 3)  # one extra comma space for every 3 digits
      ++decimal_width  # possible negative sign

      print_indent
      if (n >= 0) print n.format( "," ).justified( decimal_width )
      else        print (("-" + (-n).format( "," )).justified( decimal_width ))
      println

    method parse_files
      if ($isDefined(PARSER_EXISTS))
        forEach (arg in command_line//args)
          local filepath = arg->String
          local parser = Parser( File(filepath) )
          local ast = parser.parse
          @trace ast
        endForEach
      endIf

    method print_indent
      print "   "
      loop (command_index.digit_count.or_larger(2)) print " "

    method repl
      println "0rc Calculator"
      println "Commands include (h)elp and (q)uit."
      loop
        local input = Console.input( "@$> "((command_index.format("03"))) )
        if (not input or input == "quit" or input == "q") escapeLoop
        if (input == "") nextIteration

        local parser = Parser( "<$>"(command_index.format("4")), input )
        try
          local statements = parser.parse
          Resolver.visit( statements )
          local result = statements.execute
          result.display
        catch (error:CompileError)
          println "ERROR: " + error.message
        endTry

        ++command_index
      endLoop

    method parse_args( args:String[] )->Variant
      # This method is unrelated to the Froley Parser
      local command_line = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command_line

    method print_usage
      println @|USAGE
               |  0rc [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass
